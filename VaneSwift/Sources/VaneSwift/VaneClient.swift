// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(vaneFFI)
    import vaneFFI
#endif

extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    fileprivate init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    fileprivate static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    fileprivate static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_vane_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    fileprivate func deallocate() {
        try! rustCall { ffi_vane_rustbuffer_free(self, $0) }
    }
}

extension ForeignBytes {
    fileprivate init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

extension Data {
    fileprivate init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws
    -> T
{
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range) })
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws
    -> [UInt8]
{
    let range = reader.offset..<(reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S)
where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow:
            return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case .rustPanic(let message): return message
        }
    }
}

extension NSLock {
    fileprivate func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

extension RustCallStatus {
    fileprivate init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureVaneInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
private final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol VaneClientProtocol: AnyObject, Sendable {

    func deleteRequest(url: String) throws -> VaneResponse

    func executeRequest(request: VaneRequest) throws -> VaneResponse

    func getRequest(url: String) throws -> VaneResponse

    func patchRequest(url: String, body: String?) throws -> VaneResponse

    func postRequest(url: String, body: String?) throws -> VaneResponse

    func putRequest(url: String, body: String?) throws -> VaneResponse

}
open class VaneClient: VaneClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_vane_fn_clone_vaneclient(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_vane_fn_free_vaneclient(pointer, $0) }
    }

    open func deleteRequest(url: String) throws -> VaneResponse {
        return try FfiConverterTypeVaneResponse_lift(
            try rustCallWithError(FfiConverterTypeVaneError_lift) {
                uniffi_vane_fn_method_vaneclient_delete_request(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(url), $0
                )
            })
    }

    open func executeRequest(request: VaneRequest) throws -> VaneResponse {
        return try FfiConverterTypeVaneResponse_lift(
            try rustCallWithError(FfiConverterTypeVaneError_lift) {
                uniffi_vane_fn_method_vaneclient_execute_request(
                    self.uniffiClonePointer(),
                    FfiConverterTypeVaneRequest_lower(request), $0
                )
            })
    }

    open func getRequest(url: String) throws -> VaneResponse {
        return try FfiConverterTypeVaneResponse_lift(
            try rustCallWithError(FfiConverterTypeVaneError_lift) {
                uniffi_vane_fn_method_vaneclient_get_request(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(url), $0
                )
            })
    }

    open func patchRequest(url: String, body: String?) throws -> VaneResponse {
        return try FfiConverterTypeVaneResponse_lift(
            try rustCallWithError(FfiConverterTypeVaneError_lift) {
                uniffi_vane_fn_method_vaneclient_patch_request(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(url),
                    FfiConverterOptionString.lower(body), $0
                )
            })
    }

    open func postRequest(url: String, body: String?) throws -> VaneResponse {
        return try FfiConverterTypeVaneResponse_lift(
            try rustCallWithError(FfiConverterTypeVaneError_lift) {
                uniffi_vane_fn_method_vaneclient_post_request(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(url),
                    FfiConverterOptionString.lower(body), $0
                )
            })
    }

    open func putRequest(url: String, body: String?) throws -> VaneResponse {
        return try FfiConverterTypeVaneResponse_lift(
            try rustCallWithError(FfiConverterTypeVaneError_lift) {
                uniffi_vane_fn_method_vaneclient_put_request(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(url),
                    FfiConverterOptionString.lower(body), $0
                )
            })
    }

}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVaneClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = VaneClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> VaneClient {
        return VaneClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: VaneClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VaneClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: VaneClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> VaneClient
{
    return try FfiConverterTypeVaneClient.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneClient_lower(_ value: VaneClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeVaneClient.lower(value)
}

public struct VaneClientConfig {
    public var baseUrl: String?
    public var defaultHeaders: [String: String]
    public var timeoutSeconds: UInt64?
    public var followRedirects: Bool
    public var userAgent: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        baseUrl: String?, defaultHeaders: [String: String], timeoutSeconds: UInt64?,
        followRedirects: Bool, userAgent: String?
    ) {
        self.baseUrl = baseUrl
        self.defaultHeaders = defaultHeaders
        self.timeoutSeconds = timeoutSeconds
        self.followRedirects = followRedirects
        self.userAgent = userAgent
    }
}

#if compiler(>=6)
    extension VaneClientConfig: Sendable {}
#endif

extension VaneClientConfig: Equatable, Hashable {
    public static func == (lhs: VaneClientConfig, rhs: VaneClientConfig) -> Bool {
        if lhs.baseUrl != rhs.baseUrl {
            return false
        }
        if lhs.defaultHeaders != rhs.defaultHeaders {
            return false
        }
        if lhs.timeoutSeconds != rhs.timeoutSeconds {
            return false
        }
        if lhs.followRedirects != rhs.followRedirects {
            return false
        }
        if lhs.userAgent != rhs.userAgent {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(baseUrl)
        hasher.combine(defaultHeaders)
        hasher.combine(timeoutSeconds)
        hasher.combine(followRedirects)
        hasher.combine(userAgent)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVaneClientConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws
        -> VaneClientConfig
    {
        return
            try VaneClientConfig(
                baseUrl: FfiConverterOptionString.read(from: &buf),
                defaultHeaders: FfiConverterDictionaryStringString.read(from: &buf),
                timeoutSeconds: FfiConverterOptionUInt64.read(from: &buf),
                followRedirects: FfiConverterBool.read(from: &buf),
                userAgent: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: VaneClientConfig, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.baseUrl, into: &buf)
        FfiConverterDictionaryStringString.write(value.defaultHeaders, into: &buf)
        FfiConverterOptionUInt64.write(value.timeoutSeconds, into: &buf)
        FfiConverterBool.write(value.followRedirects, into: &buf)
        FfiConverterOptionString.write(value.userAgent, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneClientConfig_lift(_ buf: RustBuffer) throws -> VaneClientConfig {
    return try FfiConverterTypeVaneClientConfig.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneClientConfig_lower(_ value: VaneClientConfig) -> RustBuffer {
    return FfiConverterTypeVaneClientConfig.lower(value)
}

public struct VaneRequest {
    public var url: String
    public var method: String
    public var headers: [String: String]
    public var queryParams: [String: String]
    public var body: String?
    public var timeoutSeconds: UInt64?
    public var followRedirects: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        url: String, method: String, headers: [String: String], queryParams: [String: String],
        body: String?, timeoutSeconds: UInt64?, followRedirects: Bool
    ) {
        self.url = url
        self.method = method
        self.headers = headers
        self.queryParams = queryParams
        self.body = body
        self.timeoutSeconds = timeoutSeconds
        self.followRedirects = followRedirects
    }
}

#if compiler(>=6)
    extension VaneRequest: Sendable {}
#endif

extension VaneRequest: Equatable, Hashable {
    public static func == (lhs: VaneRequest, rhs: VaneRequest) -> Bool {
        if lhs.url != rhs.url {
            return false
        }
        if lhs.method != rhs.method {
            return false
        }
        if lhs.headers != rhs.headers {
            return false
        }
        if lhs.queryParams != rhs.queryParams {
            return false
        }
        if lhs.body != rhs.body {
            return false
        }
        if lhs.timeoutSeconds != rhs.timeoutSeconds {
            return false
        }
        if lhs.followRedirects != rhs.followRedirects {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(url)
        hasher.combine(method)
        hasher.combine(headers)
        hasher.combine(queryParams)
        hasher.combine(body)
        hasher.combine(timeoutSeconds)
        hasher.combine(followRedirects)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVaneRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VaneRequest
    {
        return
            try VaneRequest(
                url: FfiConverterString.read(from: &buf),
                method: FfiConverterString.read(from: &buf),
                headers: FfiConverterDictionaryStringString.read(from: &buf),
                queryParams: FfiConverterDictionaryStringString.read(from: &buf),
                body: FfiConverterOptionString.read(from: &buf),
                timeoutSeconds: FfiConverterOptionUInt64.read(from: &buf),
                followRedirects: FfiConverterBool.read(from: &buf)
            )
    }

    public static func write(_ value: VaneRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.url, into: &buf)
        FfiConverterString.write(value.method, into: &buf)
        FfiConverterDictionaryStringString.write(value.headers, into: &buf)
        FfiConverterDictionaryStringString.write(value.queryParams, into: &buf)
        FfiConverterOptionString.write(value.body, into: &buf)
        FfiConverterOptionUInt64.write(value.timeoutSeconds, into: &buf)
        FfiConverterBool.write(value.followRedirects, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneRequest_lift(_ buf: RustBuffer) throws -> VaneRequest {
    return try FfiConverterTypeVaneRequest.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneRequest_lower(_ value: VaneRequest) -> RustBuffer {
    return FfiConverterTypeVaneRequest.lower(value)
}

public struct VaneResponse {
    public var statusCode: UInt16
    public var headers: [String: String]
    public var body: String
    public var isSuccess: Bool
    public var url: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        statusCode: UInt16, headers: [String: String], body: String, isSuccess: Bool, url: String
    ) {
        self.statusCode = statusCode
        self.headers = headers
        self.body = body
        self.isSuccess = isSuccess
        self.url = url
    }
}

#if compiler(>=6)
    extension VaneResponse: Sendable {}
#endif

extension VaneResponse: Equatable, Hashable {
    public static func == (lhs: VaneResponse, rhs: VaneResponse) -> Bool {
        if lhs.statusCode != rhs.statusCode {
            return false
        }
        if lhs.headers != rhs.headers {
            return false
        }
        if lhs.body != rhs.body {
            return false
        }
        if lhs.isSuccess != rhs.isSuccess {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(statusCode)
        hasher.combine(headers)
        hasher.combine(body)
        hasher.combine(isSuccess)
        hasher.combine(url)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVaneResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VaneResponse
    {
        return
            try VaneResponse(
                statusCode: FfiConverterUInt16.read(from: &buf),
                headers: FfiConverterDictionaryStringString.read(from: &buf),
                body: FfiConverterString.read(from: &buf),
                isSuccess: FfiConverterBool.read(from: &buf),
                url: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: VaneResponse, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.statusCode, into: &buf)
        FfiConverterDictionaryStringString.write(value.headers, into: &buf)
        FfiConverterString.write(value.body, into: &buf)
        FfiConverterBool.write(value.isSuccess, into: &buf)
        FfiConverterString.write(value.url, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneResponse_lift(_ buf: RustBuffer) throws -> VaneResponse {
    return try FfiConverterTypeVaneResponse.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneResponse_lower(_ value: VaneResponse) -> RustBuffer {
    return FfiConverterTypeVaneResponse.lower(value)
}

public enum VaneError: Swift.Error {

    case Generic(
        String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVaneError: FfiConverterRustBuffer {
    typealias SwiftType = VaneError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VaneError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        case 1:
            return .Generic(
                try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VaneError, into buf: inout [UInt8]) {
        switch value {

        case .Generic(let v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)

        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneError_lift(_ buf: RustBuffer) throws -> VaneError {
    return try FfiConverterTypeVaneError.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVaneError_lower(_ value: VaneError) -> RustBuffer {
    return FfiConverterTypeVaneError.lower(value)
}

extension VaneError: Equatable, Hashable {}

extension VaneError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String:
        String]
    {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
public func createDefaultConfig() -> VaneClientConfig {
    return try! FfiConverterTypeVaneClientConfig_lift(
        try! rustCall {
            uniffi_vane_fn_func_create_default_config(
                $0
            )
        })
}
public func createJsonBody(json: String) throws -> String {
    return try FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeVaneError_lift) {
            uniffi_vane_fn_func_create_json_body(
                FfiConverterString.lower(json), $0
            )
        })
}
public func createVaneClient(config: VaneClientConfig) throws -> VaneClient {
    return try FfiConverterTypeVaneClient_lift(
        try rustCallWithError(FfiConverterTypeVaneError_lift) {
            uniffi_vane_fn_func_create_vane_client(
                FfiConverterTypeVaneClientConfig_lower(config), $0
            )
        })
}
public func parseJsonResponse(resp: VaneResponse) throws -> String {
    return try FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeVaneError_lift) {
            uniffi_vane_fn_func_parse_json_response(
                FfiConverterTypeVaneResponse_lower(resp), $0
            )
        })
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_vane_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_vane_checksum_func_create_default_config() != 54371 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_func_create_json_body() != 39062 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_func_create_vane_client() != 57471 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_func_parse_json_response() != 17500 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_method_vaneclient_delete_request() != 44430 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_method_vaneclient_execute_request() != 51840 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_method_vaneclient_get_request() != 12326 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_method_vaneclient_patch_request() != 60919 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_method_vaneclient_post_request() != 55679 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vane_checksum_method_vaneclient_put_request() != 34166 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureVaneInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
